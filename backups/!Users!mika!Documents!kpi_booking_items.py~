import json
import pandas as pd


res = json.load(open('booking_items.json', 'r'))

hits = res['hits']['hits']

no_client_accounting = []


def get_date(x, f='created_at'):
    if 'client_accounting' in x['_source']:
        t = x['_source']['client_accounting']['meta_data'].get(f)
    else:
        no_client_accounting.append(x)
        t = x['_source']['booking_item']['meta_data'].get(f)
    if t is not None:
        return pd.to_datetime(t).date()
    else:
        return None

items = [
    {
        'id': h['_source']['_id'],
        'status': h['_source']['booking_item']['status'],
        'type': h['_source']['booking_item']['type'],
        'canceled': h['_source']['booking_item']['canceled'],
        'rebooked': h['_source']['booking_item']['rebooked'],
        'created_at': get_date(h),
        'updated_at': get_date(h, 'updated_at'),
        'rebooked_from': h['_source']['booking_item'].get('rebooked_from'),
        'refund_for': h['_source']['booking_item'].get('refund_for'),
        'booking_id': h['_source']['booking_id'],
        'invoice_id': h['_source']['client_accounting']['invoice_id'],
        'company': h['_source']['company']['name'] if h['_source']['company'] is not None else None,
        'tax_class': h['_source']['booking_item']['client_accounting_item']['tax_class'],
        'vat': h['_source']['booking_item']['client_accounting_item']['vat'],
        'currency': h['_source']['booking_item']['client_accounting_item']['currency'],
        'amount': h['_source']['booking_item']['client_accounting_item']['amount'],
        'client_cost_center_1': h['_source']['booking_item']['client_accounting_item'].get('client_cost_center_1'),
        'client_cost_center_2': h['_source']['booking_item']['client_accounting_item'].get('client_cost_center_2')
    }
    for h in hits if h['_source']['status'] != 'draft']

items = pd.DataFrame(items)
items['amount_gross'] = items.amount * (1.0+items.vat/100.)
print('Got {} booking items'.format(len(items)))
assert items.id.nunique() == items.shape[0]
items = items.set_index('id')

# Filter items that are both, refund_for and rebooked_from - that should not be - should it?
print('Deleting {} items which are refund_for and rebooking_from'.format(
    len(items[items.rebooked_from.notnull() & items.refund_for.notnull()])))
items = items[-(items.rebooked_from.notnull() & items.refund_for.notnull())]

# This should work with a self-join - but it does not; so I do it manually
items['parent_status'] = None
for i_id, i in items.iterrows():
    if i['rebooked_from'] is not None:
        items.set_value(i_id, 'parent_status', items.ix[i['rebooked_from']]['status'])
    if i['refund_for'] is not None:
        items.set_value(i_id, 'parent_status', items.ix[i['refund_for']]['status'])

assert len(items[(items.rebooked_from.notnull() | items.refund_for.notnull())
                 & -items.parent_status.notnull()]) == 0


def assign_to_status(items, name, status, canceled, rebooked, refund_for,
                     rebooked_from, parent_status):
    items[name] = ((items.status == status) &
                   (items.canceled == canceled) &
                   (items.rebooked == rebooked) &
                   (items.refund_for.isnull() if refund_for == 0 else
                    items.refund_for.notnull()) &
                   (items.rebooked_from.isnull() if rebooked_from == 0
                    else items.rebooked_from.notnull()) &
                   (items.parent_status.isnull() if parent_status is
                    None else items.parent_status == parent_status)).astype(int)


assign_to_status(items, 'is_booking', 'processed', 0, 0, 0, 0, None)
assign_to_status(items, 'is_booking_rebooked', 'processed', 0, 1, 0, 0, None)
assign_to_status(items, 'is_booking_canceled', 'processed', 1, 0, 0, 0, None)
assign_to_status(items, 'is_rebooking', 'processed', 0, 0, 0, 1, 'processed')
assign_to_status(items, 'is_rebooking_rebooked', 'processed', 0, 1, 0, 1, 'processed')
assign_to_status(items, 'is_rebooking_canceled', 'processed', 1, 0, 0, 1, 'processed')
assign_to_status(items, 'is_correction_rebooking', 'processed', 0, 0, 0, 1, 'fuckup')
assign_to_status(items, 'is_correction_rebooking_rebooked', 'processed', 0, 1, 0, 1, 'fuckup')
assign_to_status(items, 'is_correction_rebooking_canceled', 'processed', 1, 0, 0, 1, 'fuckup')
assign_to_status(items, 'is_refund', 'processed', 0, 0, 1, 0, 'processed')
assign_to_status(items, 'is_refund_refunded', 'processed', 1, 0, 1, 0, 'processed')
assign_to_status(items, 'is_correction_refund', 'processed', 0, 0, 1, 0, 'fuckup')
assign_to_status(items, 'is_correction_refund_refunded', 'processed', 1, 0, 1, 0, 'fuckup')

assign_to_status(items, 'is_unknown_1', 'fuckup', 0, 0, 0, 1, 'processed')
assign_to_status(items, 'is_unknown_2', 'fuckup', 0, 0, 0, 1, 'fuckup')
assign_to_status(items, 'is_unknown_3', 'fuckup', 0, 0, 1, 0, 'processed')
assign_to_status(items, 'is_unknown_4', 'fuckup', 0, 0, 1, 0, 'fuckup')
assign_to_status(items, 'is_unknown_5', 'fuckup', 0, 0, 0, 0, None)

assign_to_status(items, 'is_booking_corrected_by_rebooking', 'fuckup', 0, 1, 0, 0, None)
assign_to_status(items, 'is_booking_corrected_by_cancelation', 'fuckup', 1, 0, 0, 0, None)
assign_to_status(items, 'is_rebooking_corrected_by_rebooking', 'fuckup', 0, 1, 0, 1, 'processed')
assign_to_status(items, 'is_rebooking_corrected_by_cancelation', 'fuckup', 1, 0, 0, 1, 'processed')
assign_to_status(items, 'is_correction_rebooking_corrected_by_rebooking', 'fuckup', 0, 1, 0, 1,
                 'fuckup')
assign_to_status(items, 'is_correction_rebooking_corrected_by_cancelation', 'fuckup', 1, 0, 0, 1,
                 'fuckup')
assign_to_status(items, 'is_refund_corrected_by_refund', 'fuckup', 1, 0, 1, 0, 'processed')
assign_to_status(items, 'is_correction_refund_corrected_by_refund', 'fuckup', 1, 0, 1, 0, 'fuckup')

# check that every item is assigned to exactly one group, whether or
# not it is counted
assert all(items.filter(regex='is_*').sum(1) == 1)

items['cnt_booking_at_created_at'] = (
    items.is_booking +
    items.is_booking_rebooked +
    items.is_booking_canceled +
    items.is_booking_corrected_by_rebooking +
    items.is_booking_corrected_by_cancelation
)
items['cnt_booking_at_created_at_wo'] = (
    items.is_booking +
    items.is_booking_rebooked +
    items.is_booking_canceled +
    items.is_booking_corrected_by_rebooking +
    items.is_booking_corrected_by_cancelation
)
items['cnt_rebooking_at_created_at'] = (
    items.is_rebooking +
    items.is_rebooking_rebooked +
    items.is_rebooking_canceled +
    items.is_correction_rebooking +
    items.is_correction_rebooking_rebooked +
    items.is_correction_rebooking_canceled +
    items.is_rebooking_corrected_by_rebooking +
    items.is_rebooking_corrected_by_cancelation +
    items.is_correction_rebooking_corrected_by_rebooking +
    items.is_correction_rebooking_corrected_by_cancelation
)
items['cnt_correction_at_created_at'] = (
    items.is_correction_rebooking +
    items.is_correction_rebooking_rebooked +
    items.is_correction_rebooking_canceled +
    items.is_correction_rebooking_corrected_by_rebooking +
    items.is_correction_rebooking_corrected_by_cancelation
)
items['cnt_cancellation_at_canceled_at'] = (
    items.is_booking_canceled +
    items.is_rebooking_canceled +
    items.is_correction_rebooking_canceled
)
items['cnt_refund_at_created_at'] = (
    items.is_refund +
    items.is_refund_refunded +
    items.is_refund_corrected_by_refund
)
items['cnt_correction_refund_at_created_at'] = (
    items.is_correction_refund +
    items.is_correction_refund_refunded +
    items.is_correction_refund_corrected_by_refund
)
items['cnt_correction_at_canceled_at'] = (
    items.is_booking_corrected_by_cancelation +
    items.is_rebooking_corrected_by_cancelation +
    items.is_correction_rebooking_corrected_by_cancelation
)
items['cnt_unknown_correction'] = (
    items.is_unknown_1 +
    items.is_unknown_2 +
    items.is_unknown_3 +
    items.is_unknown_4 +
    items.is_unknown_5
)



X = items.groupby(['company', 'created_at', 'invoice_id', 'tax_class', 'vat', 'type',
                   'client_cost_center_1', 'client_cost_center_2']).sum()[
    ['amount', 'amount_gross']]

# Modulate counts per item type
