from brat_io import bratify_ann
import regex as re
from . base_tagger import BaseTagger, TagStatus


class CategoryOrClassTagger(BaseTagger):
    catOrClass = ["Economy (class)?", "business (class)?", "FlyClassic", "1. Klasse",
                  "biz", "eco", "2. Klasse", "Businessklasse", "Flexpreis"]

    def class_to_id(catOrClass):
        return {catOrClass: i for i, catOrClass in enumerate(catOrClass)}

    def build_re_category_or_class(catOrClass):
        catOrClass = sorted(catOrClass, key=lambda x: -len(x))
        r_names = r'|'.join([a.replace(' ', '\s*') for a in catOrClass])
        r_names = r'(?P<category_or_class>(?i)' + r_names + r')'
        r_names = (r'(?<=\s|\p{{P}}|\||^){names}(?=\s|\p{{P}}|\||$)').format(
            names=r_names)
        return re.compile(r_names, re.VERSION1 | re.MULTILINE)

    class2id = class_to_id(catOrClass)
    re_category_or_class = build_re_category_or_class(list(class2id.keys()))

    def tag(self, msg, result):
        matches = []
        for m in CategoryOrClassTagger.re_category_or_class.finditer(msg['body']):
            a = bratify_ann(msg, 'CategoryOrClass', m.start(), m.end(),
                            where='body', attributes={"class": ""})
            matches.append(a)
        result['annotations'] += matches
        return TagStatus.success
