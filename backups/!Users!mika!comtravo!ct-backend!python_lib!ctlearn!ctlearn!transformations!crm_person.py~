import logging
from collections import Counter
from . base_tagger import BaseTagger, TagStatus
from es_client import query_elasticsearch

logger = logging.getLogger(__name__)


class CRMPersonTagger(BaseTagger):
    def tag(self, msg, result):
        """Input: company + associated user data ("companies") and users in
        all companies by user_id ("users"). NOTE: physically identical
        persons (same name/email) need not to be unique:

        1. The physically same person can be assigned to two companies with different user_ids

        3. However, the same user_id will cannot be assigned to two companies/no company

        users are per user_id, companies by company_id, users within a company again be user_id

        Example:
        {
            "users": {
                "56fe62c82c9e490100f8dc24": {
                    "company_id": "56b9a31426d6a70100e1074f",
                    "msg_roles": [
                        "from"
                    ],
                    "last_name": "Müller",
                    "first_name": "Alina",
                    "email": "alina@test.com"
                },
                ...all other users from the companies part by their id...
            },
            "companies": {
                "56b9a31426d6a70100e1074f": {
                    "users": {
                        "56b9abda26d6a70100e10750": {
                            "msg_roles": [
                                "from"
                            ],
                            "last_name": "Müller",
                            "first_name": "Alina",
                            "email": "alina@test.com"
                        },
                        "56d4d2730156a40100498693": {
                            "msg_roles": [
                                "to"
                            ],
                            "last_name": "Meier",
                            "first_name": "Florian",
                            "email": "meier@test.com"
                        }
                    },
                    "likelihood": 0.5
                },
                "56b90369eb2c4601003a99f4": {
                    "users": {
                        "56d539beb0cee501003eea71": {
                            "msg_roles": [
                                "to",
                                "cc"
                            ],
                            "last_name": "Schmidt",
                            "first_name": "Manuela",
                            "email": "schmidt@xyz.com"
                        }
                    },
                    "likelihood": 0.25
                },
                "56b903bd0dde60010094f2d2": {
                    "users": {
                        "56d5373cb0cee501003eea70": {
                            "msg_roles": [
                                "to",
                                "cc"
                            ],
                            "last_name": "Schmidt",
                            "first_name": "Manuela",
                            "email": "schmidt@xyz.com"
                        }
                    },
                    "likelihood": 0.25
                }
            }
        }

        Updates companies to also contain all users that are associated
        with any company in companies. New users are add to the
        company['users'] as well as to the global 'users' list.

        """
        def match_email_to_msg(msg, email):
            """return a list of fields ('to', 'cc', 'from') where the email appears in
            msg"""
            ret = Counter()
            if email == msg['from']['email']:
                ret.update(['from'])
            for e in msg['to']:
                if email == e['email']:
                    ret.update(['to'])
                    break
            for e in msg['cc']:
                if email == e['email']:
                    ret.update(['cc'])
                    break
            return ret

        if len(result['crm']['companies']) == 0:
            return TagStatus.success
        query = {
            'query': {
                'bool': {
                    'should': [
                        {'terms': {'company': [cid for cid in result['crm']['companies']]}}
                    ],
                    'minimum_should_match': 1
                }
            },
            'size': 1000
        }
        res_es = query_elasticsearch(query, index='travelers')
        if res_es['status'] == 900:
            return TagStatus.server_error
        elif res_es['status'] != 200:
            return TagStatus.client_error
        ans = res_es['result']
        if ans['hits']['total'] == 0:
            return TagStatus.success

        if ans['hits']['total'] != len(ans['hits']['hits']):
            logger.error('number of results {} != number of hits {} - size limit reached?'.format(
                ans['hits']['total'], len(ans['hits']['hits'])))
        for pp in ans['hits']['hits']:
            p = pp['_source']
            if pp['_id'] in result['crm']['users']:
                continue
            if 'gender' not in p:
                if p['title'].lower() in ['Mrs', 'ms']:
                    p['gender'] = 'f'
                elif p['title'].lower() == 'mr':
                    p['gender'] = 'm'
                else:
                    p['gender'] = 'unknown'
            roles = match_email_to_msg(msg, p['email'])
            result['crm']['users'][pp['_id']] = {'first_name': p['first_name'],
                                                 'last_name': p['last_name'],
                                                 'gender': p['gender'],
                                                 'email': p['email'],
                                                 'msg_roles': roles,
                                                 'company_id': p['company'] if 'company' in p
                                                 else None}
        return TagStatus.success
