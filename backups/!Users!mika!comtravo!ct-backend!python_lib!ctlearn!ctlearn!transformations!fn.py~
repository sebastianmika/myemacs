from .. base import Transformer
import os
import json
from brat_io import bratify_ann
import regex as re


class FlightNumberTransformer(Transformer):
    def __init__(self):
        super(FlightNumberTransformer, self).__init__(input_keys=['msg_trc'],
                                                      output_key='fn')

    def load_airlines_data():
        path = os.path.dirname(os.path.abspath(__file__))
        return json.load(open(os.path.join(path, 'data/airlines.json'), 'r'))

    def build_re_flight_number(_airline_data):
        r_code = r'|'.join([a['AirlineCode'] for a in _airline_data['AirlineInfo']])
        r_code = r'(?i)(?P<airline_code>' + r_code + r')'
        r_fn = (r'(?<=\s|\p{{P}}|\||^){airline_code}\s*'
                # \p{Sc}}Â == currency signs
                '(?P<flight_number>\d{{3,4}})(?!\s*EUR|USD|\p{{Sc}})(?=\s|\p{{P}}|\||$)').format(
                    airline_code=r_code)
        return re.compile(r_fn, re.VERSION1 | re.MULTILINE)

    re_flight_number = build_re_flight_number(load_airlines_data())

    def tag(self, msg):
        matches = []
        for m in FlightNumberTransformer.re_flight_number.finditer(msg['body']):
            a = bratify_ann(msg, 'FlightNumber', m.start(), m.end(),
                            attributes={'airline_code': m.group('airline_code'),
                                        'flight_number': m.group('flight_number')},
                            where='body')
            matches.append(a)
        for m in FlightNumberTransformer.re_flight_number.finditer(msg['subject']):
            a = bratify_ann(msg, 'FlightNumber', m.start(), m.end(),
                            attributes={'airline_code': m.group('airline_code'),
                                        'flight_number': m.group('flight_number')},
                            where='subject')
            matches.append(a)
        return matches

    def transform(self, *args):
        res = [None] * len(args[0])
        for idx, (msg,) in enumerate(zip(*args)):
            res[idx] = self.tag(msg)
        return res
