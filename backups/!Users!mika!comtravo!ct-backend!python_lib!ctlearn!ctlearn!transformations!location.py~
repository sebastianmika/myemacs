from .. base import Transformer
import os
import json
from brat_io import bratify_ann
import regex as re


class LocationTransformer(Transformer):
    def __init__(self):
        super(LocationTransformer, self).__init__(input_keys=['msg_trc'],
                                                  output_key='location')

    def load_city_data():
        path = os.path.dirname(os.path.abspath(__file__))
        return {int(k): v for k, v in json.load(open(os.path.join(
            path, 'data/org.geonames.cities15000.json'), 'r')).items()}

    def city_to_id(cities):
        c2id = {}
        for k, v in cities.items():
            if v['name'] not in c2id:
                c2id[v['name']] = set([])
            c2id[v['name']].add(k)
            if v['alternate_names'] is not None:
                for x in v['alternate_names']:
                    if x['name'] not in c2id:
                        c2id[x['name']] = set([])
                    c2id[x['name']].add(k)
        for k, v in c2id.items():
            c2id[k] = list(v)
        return c2id

    def build_re_city(cities):
        # sort from longest to shortest city, first in list matches first...
        cities = sorted(cities, key=lambda x: -len(x))
        r_names = r'|'.join([re.escape(c) for c in cities])
        r_names = r'(?P<city_name>' + r_names + r')'
        r_names = (r'(?<=\s|\p{{P}}|\||^){names}(?=\s|\p{{P}}|\||$)').format(
            names=r_names)
        return re.compile(r_names, re.VERSION1 | re.MULTILINE)

    cities = load_city_data()
    city2id = city_to_id(cities)
    re_cities = build_re_city(list(city2id.keys()))

    def tag(self, msg):
        matches = []
        for m in LocationTransformer.re_cities.finditer(msg['body']):
            # Special cases to handle:
            # - "Date
            # - "Zug
            # - "Berlin Tegel"
            # - "fÃ¼r Martin"/"Martin"
            # - "Mobile:"
            # - "Berlin Charlottenburg"
            # - "Roman Kirsch"
            # - "Marion"
            # - "Seppeler-Rietberg GmbH"
            # - "D.dorf" missed
            # - "Tegel" -> sub part of Berlin instead of airport
            # - "Best"
            a = bratify_ann(msg, 'Location', m.start(), m.end(),
                            attributes={'geonames_ids': sorted(
                                LocationTransformer.city2id[m.group('city_name')])},
                            where='body')
            matches.append(a)
        for m in LocationTransformer.re_cities.finditer(msg['subject']):
            a = bratify_ann(msg, 'Location', m.start(), m.end(),
                            attributes={'geonames_ids': sorted(
                                LocationTransformer.city2id[m.group('city_name')])},
                            where='subject')
            matches.append(a)
        return matches

    def transform(self, *args):
        res = [None] * len(args[0])
        for idx, (msg,) in enumerate(zip(*args)):
            res[idx] = self.tag(msg)
        return res
