from unittest import TestCase
from unittest.mock import patch
from email_tagger.get_companies import get_companies


class TestTagPersons(TestCase):
    @patch('email_tagger.get_companies._query_elasticsearch')
    def test_get_companies_error(self, get_mock):
        get_mock.return_value = None
        msg = {
            'from': {'email': 'test@test.com'},
            'to': [],
            'cc': []
        }
        self.assertEquals(get_companies(msg), [])

    @patch('email_tagger.get_companies._query_elasticsearch')
    def test_get_companies_empty(self, get_mock):
        get_mock.return_value = {'hits': {'total': 0}}
        msg = {
            'from': {'email': 'test@test.com'},
            'to': [],
            'cc': []
        }
        self.assertEquals(get_companies(msg), [])

    @patch('email_tagger.get_companies._query_elasticsearch')
    def test_get_companies_onehit(self, get_mock):
        get_mock.return_value = {'hits': {'total': 1},
                                 'aggregations': {
                                     'unique_companies': {
                                         'buckets': [
                                             {'key': 1}
                                         ]
                                     }
                                 }}
        msg = {
            'from': {'email': 'test@test.com'},
            'to': [],
            'cc': []
        }
        self.assertEquals(get_companies(msg), [1])

    @patch('email_tagger.get_companies._query_elasticsearch')
    def test_get_companies_morehits(self, get_mock):
        get_mock.return_value = {'hits': {'total': 1},
                                 'aggregations': {
                                     'unique_companies': {
                                         'buckets': [
                                             {'key': 1},
                                             {'key': 2},
                                             {'key': 3}
                                         ]
                                     }
                                 }}
        msg = {
            'from': {'email': 'test@test.com'},
            'to': [{'email': 'test2@test.com'}],
            'cc': [{'email': 'test@test.com'}, {'email': 'test3@test.com'}]
        }
        self.assertEquals(get_companies(msg), [1, 2, 3])
