from unittest import TestCase
from unittest.mock import patch
from email_tagger.get_persons import get_persons


class TestGetPersons(TestCase):
    @patch('email_tagger.get_persons._query_elasticsearch')
    def test_get_persons_error(self, get_mock):
        get_mock.return_value = None
        self.assertEquals(get_persons(['1']), [])

    def test_get_persons_empty_input(self):
        self.assertEquals(get_persons([]), [])

    @patch('email_tagger.get_persons._query_elasticsearch')
    def test_get_persons_no_hits(self, get_mock):
        get_mock.return_value = {'hits': {'total': 0}}
        self.assertEquals(get_persons([1]), [])

    @patch('email_tagger.get_persons._query_elasticsearch')
    def test_get_persons_one_hit(self, get_mock):
        get_mock.return_value = {
            'hits': {'total': 1,
                     'hits': [{
                         'booker': {
                             '_id': 1,
                             'first_name': 'b1',
                             'last_name': 'l1',
                             'full_name': 'f1',
                             'email': 'e1'
                         },
                         'booking_items': []
                     }]}}
        self.assertEquals(get_persons(['mocked']), [{
            'id': 1,
            'first_name': 'b1',
            'last_name': 'l1',
            'full_name': 'f1',
            'email': 'e1',
            'roles': set(['booker'])
        }])

    @patch('email_tagger.get_persons._query_elasticsearch')
    def test_get_persons_two_hits(self, get_mock):
        get_mock.return_value = {
            'hits': {'total': 1,
                     'hits': [{
                         'booker': {
                             '_id': 1,
                             'first_name': 'b1',
                             'last_name': 'l1',
                             'full_name': 'f1',
                             'email': 'e1'
                         },
                         'booking_items': [{
                             'traveler_id': 2,
                             'traveler': {
                                 'first_name': 'b2',
                                 'last_name': 'l2',
                                 'full_name': 'f2',
                                 'email': 'e2'
                             }
                         }]
                     }]}}
        self.assertEquals(get_persons(['mocked']), [{
            'id': 1,
            'first_name': 'b1',
            'last_name': 'l1',
            'full_name': 'f1',
            'email': 'e1',
            'roles': set(['booker'])
        }, {'id': 2,
            'first_name': 'b2',
            'last_name': 'l2',
            'full_name': 'f2',
            'email': 'e2',
            'roles': set(['traveler'])}])

    @patch('email_tagger.get_persons._query_elasticsearch')
    def test_get_persons_three_hits(self, get_mock):
        get_mock.return_value = {
            'hits': {'total': 1,
                     'hits': [{
                         'booker': {
                             '_id': 1,
                             'first_name': 'b1',
                             'last_name': 'l1',
                             'full_name': 'f1',
                             'email': 'e1'
                         },
                         'booking_items': [{
                             'traveler_id': 2,
                             'traveler': {
                                 'first_name': 'b2',
                                 'last_name': 'l2',
                                 'full_name': 'f2',
                                 'email': 'e2'
                             }
                         }, {
                             'traveler_id': 1,
                             'traveler': {
                                 'first_name': 'b1',
                                 'last_name': 'l1',
                                 'full_name': 'f1_updated',
                                 'email': 'e1'
                             }}]
                     }]}}
        self.assertEquals(get_persons(['mocked']), [{
            'id': 1,
            'first_name': 'b1',
            'last_name': 'l1',
            'full_name': 'f1_updated',
            'email': 'e1',
            'roles': set(['booker', 'traveler'])
        }, {'id': 2,
            'first_name': 'b2',
            'last_name': 'l2',
            'full_name': 'f2',
            'email': 'e2',
            'roles': set(['traveler'])
        }])

