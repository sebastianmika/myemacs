from email_tagger.tag_persons import tag_persons, _get_person_by_email
from unittest.mock import patch, MagicMock


@patch('email_tagger.tag_persons.get')
def test_get_by_email(get_mock):
    response_mock = MagicMock()
    response_mock.status_code = 200
    response_mock.json = MagicMock(return_value={'hits': {'total': 0}})
    get_mock.side_effect = [response_mock, response_mock]
    assert _get_person_by_email('test@example.com') == []

    response_mock_booker = MagicMock()
    response_mock_booker.status_code = 200
    response_mock_booker.json = MagicMock(return_value={
        'hits': {'total': 1, 'hits': [{'_source': {'booker': "A BOOKER"}}]}})
    response_mock_traveler = MagicMock()
    response_mock_traveler.status_code = 200
    response_mock_traveler.json = MagicMock(return_value={
        'hits': {'total': 1, 'hits': [{'_source': {'booking_items': [{'traveler': {'email': 'test@example.com'}}]}}]}})
    get_mock.side_effect = [response_mock_booker, response_mock_traveler]

    assert _get_person_by_email('test@example.com') == ["A BOOKER", {'email': 'test@example.com'}]


@patch('email_tagger.tag_persons.get')
def test_tag_persons(get_mock):
    response_mock_booker = MagicMock()
    response_mock_booker.status_code = 200
    response_mock_booker.json = MagicMock(return_value={
        'hits': {'total': 1, 'hits': [{'_source': {'booker': "A BOOKER"}}]}})
    response_mock_traveler = MagicMock()
    response_mock_traveler.status_code = 200
    response_mock_traveler.json = MagicMock(return_value={
        'hits': {'total': 1, 'hits': [{'_source': {'booking_items': [{'traveler': {'email': 'test@example.com'}}]}}]}})
    get_mock.side_effect = [response_mock_booker, response_mock_traveler]
    assert tag_persons({'from': {'email': 'test@example.com'}, 'to': []}) == ["A BOOKER", {'email': 'test@example.com'}]
