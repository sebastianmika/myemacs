import json
import os
from jose.jwt import encode
from unittest import TestCase
from jwt_auth.verify import decode_token


class TestDecodeToken(TestCase):
    def _get_private_test_key(self):
        path = os.path.dirname(os.path.abspath(__file__))
        return json.load(open(os.path.join(
            path,
            '../../../nodejs_lib/passport_google_identity_toolkit/testPrivateKeys.json'),
                              'r'))['test01']

    def test_decode(self):
        token = encode({'test': 'test'}, self._get_private_test_key(), algorithm='RS256')
        self.assertEquals({'test': 'test'}, decode_token(token))

    def test_decode_with_claims(self):
        token = encode({'test': 'test', 'iss': 'issuer', 'aud': 'audience'},
                       self._get_private_test_key(), algorithm='RS256')
        os.environ['GIT_AUDIENCE'] = 'audience'
        os.environ['GIT_ISSUER'] = 'issuer'
        self.assertEquals({'test': 'test', 'iss': 'issuer', 'aud': 'audience'},
                          decode_token(token))
        os.environ.pop('GIT_AUDIENCE')
        os.environ.pop('GIT_ISSUER')

    def test_decode_wrong_secret(self):
        # Need to use non RSA algo as this is not supported here
        token = encode({'test': 'test'}, 'some wrong key', algorithm='HS256')
        self.assertEquals(None, decode_token(token))

    def test_decode_missing_audience(self):
        token = encode({'test': 'test', 'aud': 'audience'},
                       self._get_private_test_key(), algorithm='RS256')
        self.assertEquals(None, decode_token(token))

    def test_decode_wrong_audience(self):
        token = encode({'test': 'test', 'aud': 'audience'},
                       self._get_private_test_key(), algorithm='RS256')
        os.environ['GIT_AUDIENCE'] = 'another audience'
        self.assertEquals(None, decode_token(token))
        os.environ.pop('GIT_AUDIENCE')

    def test_decode_missing_issuer(self):
        token = encode({'test': 'test', 'iss': 'issuer'},
                       self._get_private_test_key(), algorithm='RS256')
        # Will not fail, when the expected issuer is None, hence we
        # need to set it to something
        os.environ['GIT_ISSUER'] = 'another issuer'
        self.assertEquals(None, decode_token(token))
        os.environ.pop('GIT_ISSUER')
