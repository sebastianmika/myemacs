import os
import requests
import json
import logging


logger = logging.getLogger(__name__)

logger.warning('disabling warning from urllib on insecure requests'
               ' - rather use a valid certificate or make the certificate'
               ' data available to the module')
requests.packages.urllib3.disable_warnings(
    requests.packages.urllib3.exceptions.InsecureRequestWarning)
# disable info logging on each request
logging.getLogger("requests.packages.urllib3").setLevel(logging.WARNING)



def _query_duckling(query):
    """Given a dictionary of a query for the nlp_tools, run that query
    against nlp_tools_server and return the result as dict
    """
    duckling_uri = os.environ.get('COMTRAVO_DUCKLING_URI', 'http://duckling/duckling')
    duckling_user = os.environ.get('COMTRAVO_DUCKLING_USER')
    duckling_password = os.environ.get('COMTRAVO_DUCKLING_PASSWORD')
    try:
        r = requests.post(
            duckling_uri,
            headers={'Accept': 'application/json', 'Content-Type': 'application/json'},
            data=json.dumps(query),
            auth=(duckling_user, duckling_password) if duckling_user else None,
            verify=False)  # Self signed cert...
    except requests.exceptions.ConnectionError as e:
        logger.error("could not connect to duckling: {}".format(e))
        return {'status': 900, 'result': {}}
    if r.status_code == 200:
        return r.json()
    else:
        logger.error('querying duckling on {} failed (code {}): {}'.format(
            duckling_uri,
            r.status_code, r.json()['error']))
        return {'status': r.status_code, 'result': {}}
