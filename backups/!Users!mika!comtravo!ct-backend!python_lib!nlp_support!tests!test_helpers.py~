from unittest import TestCase
from email_tagger.helpers import _del_reply, _get_longest_match


class TestHelper(TestCase):
    _multiprocess_can_split_ = True

    def test_del_reply(self):
        self.assertEquals(_del_reply('some text'), 'some text')
        self.assertEquals(_del_reply('Re some text'), 'some text')
        self.assertEquals(_del_reply('RE some text'), 'some text')
        self.assertEquals(_del_reply('re some text'), 'some text')
        self.assertEquals(_del_reply('Re: some text'), 'some text')
        self.assertEquals(_del_reply('RE: some text'), 'some text')
        self.assertEquals(_del_reply('re some text'), 'some text')
        self.assertEquals(_del_reply('Re:   some text'), 'some text')
        self.assertEquals(_del_reply('Re: AW: re aw:aw:re  Aw some text'), 'some text')

    def test_get_longest_match(self):
        # Empty stays empty
        self.assertEquals(_get_longest_match([]), [])
        # One element stays
        m = [{'spans': [{'start': 0, 'end': 1}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m), m)
        # Two non overlapping stay
        m = [{'spans': [{'start': 0, 'end': 1}], 'where': 'body'},
             {'spans': [{'start': 1, 'end': 2}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m), m)
        # Two non overlapping stay - with two spans each
        m = [{'spans': [{'start': 0, 'end': 1}, {'start': 2, 'end': 3}], 'where': 'body'},
             {'spans': [{'start': 1, 'end': 2}, {'start': 3, 'end': 4}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m), m)
        # Two overlapping the longer stays (first longer)
        m = [{'spans': [{'start': 0, 'end': 2}], 'where': 'body'},
             {'spans': [{'start': 1, 'end': 2}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m), [{'spans': [{'start': 0, 'end': 2}],
                                                   'where': 'body'}])
        # Two overlapping with same size: Person stays over Location
        m = [{'spans': [{'start': 0, 'end': 2}], 'where': 'body', 'type': 'Person'},
             {'spans': [{'start': 1, 'end': 3}], 'where': 'body', 'type': 'Location'}]
        self.assertEquals(_get_longest_match(m),
                          [{'spans': [{'start': 0, 'end': 2}],
                            'where': 'body', 'type': 'Person'}])
        # Two overlapping the longer stays (second longer)
        m = [{'spans': [{'start': 0, 'end': 2}], 'where': 'body'},
             {'spans': [{'start': 1, 'end': 4}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m), [{'spans': [{'start': 1, 'end': 4}],
                                                   'where': 'body'}])
        # Overlapping with two spans, second span overlapping, first longer - first stays
        m = [{'spans': [{'start': 0, 'end': 1}, {'start': 2, 'end': 4}], 'where': 'body'},
             {'spans': [{'start': 1, 'end': 2}, {'start': 3, 'end': 4}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m),
                          [{'spans': [{'start': 0, 'end': 1}, {'start': 2, 'end': 4}],
                            'where': 'body'}])
        # Overlapping with two spans, second span overlapping, both same length, Person stays
        m = [{'spans': [{'start': 0, 'end': 1}, {'start': 5, 'end': 7}], 'where': 'body',
              'type': 'Person'},
             {'spans': [{'start': 1, 'end': 3}, {'start': 6, 'end': 7}], 'where': 'body',
              'type': 'Location'}]
        self.assertEquals(_get_longest_match(m),
                          [{'spans': [{'start': 0, 'end': 1}, {'start': 5, 'end': 7}],
                            'where': 'body', 'type': 'Person'}])
        # Overlapping with two spans, second span overlapping, second
        # longer - second stays
        m = [{'spans': [{'start': 0, 'end': 1}, {'start': 5, 'end': 7}], 'where': 'body'},
             {'spans': [{'start': 1, 'end': 4}, {'start': 6, 'end': 7}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m),
                          [{'spans': [{'start': 1, 'end': 4}, {'start': 6, 'end': 7}],
                            'where': 'body'}])
        # Three spans where the first deletes the third, and second
        # would also if it was still there
        m = [{'spans': [{'start': 0, 'end': 5}, {'start': 10, 'end': 11}], 'where': 'body'},
             {'spans': [{'start': 5, 'end': 10}, {'start': 12, 'end': 13}], 'where': 'body'},
             {'spans': [{'start': 10, 'end': 13}], 'where': 'body'}]
        self.assertEquals(_get_longest_match(m),
                          [{'spans': [{'start': 0, 'end': 5}, {'start': 10, 'end': 11}],
                            'where': 'body'},
                           {'spans': [{'start': 5, 'end': 10}, {'start': 12, 'end': 13}],
                            'where': 'body'}])
