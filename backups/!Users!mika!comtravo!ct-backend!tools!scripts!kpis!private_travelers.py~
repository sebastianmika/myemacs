import requests
import json
import os
import pandas as pd
from bokeh.plotting import output_file, show
from bokeh.charts import Histogram


def get_booking_items(start_date, end_date):
    """Get all relevant booking items from elasticsearch"""
    bi_uri = os.environ.get('COMTRAVO_BI_URI', 'http://bi')
    bi_user = os.environ.get('COMTRAVO_BI_USER')
    bi_password = os.environ.get('COMTRAVO_BI_PASSWORD')
    booking_items = []
    try:
        # Get scroll id, filter to include start_date and exclude end_date UTC 00:00:00
        query = {
            "query": {
                "bool": {
                    "must": [
                        {"exists": {"field": "booking_item.flight_item"}},
                        {"exists": {"field": "company"}},
                        {"terms": {"booking_item.status": ["processed", "fuckup"]}}
                    ]
                }
            }
        }
        r = requests.post(bi_uri + '/booking_items/_search?scroll=1m&size=1000',
                          headers={'Accept': 'application/json',
                                   'Content-Type': 'application/json'},
                          auth=(bi_user, bi_password),
                          data=json.dumps(query),
                          verify=False)  # Self signed cert...
        if r.status_code != 200:
            raise Exception('querying elasticsearch on {} failed: {}'.format(
                bi_uri,
                r.status_code))
        # Get results
        r = r.json()
        scroll_id = r['_scroll_id']
        booking_items += r['hits']['hits']
        while True:
            # Iterate scroll until no more items are left
            r = requests.get(bi_uri + '/_search/scroll',
                             headers={'Accept': 'application/json',
                                      'Content-Type': 'application/json'},
                             data=json.dumps({'scroll': '1m',
                                              'scroll_id': scroll_id}),
                             auth=(bi_user, bi_password),
                             verify=False)  # Self signed cert...
            if r.status_code != 200:
                raise Exception('querying elasticsearch on {} failed: {}'.format(
                    bi_uri,
                    r.status_code))
            r = r.json()
            scroll_id = r['_scroll_id']
            if len(r['hits']['hits']) == 0:
                break
            booking_items += r['hits']['hits']
    except requests.exceptions.ConnectionError as e:
        raise Exception("could not connect to elasticsearch: {}".format(e))
    return booking_items


start_date = pd.datetime(2016, 6, 28)  # inclusive
end_date = pd.datetime(2016, 9, 29)  # exclusive

items = get_booking_items(start_date, end_date)

departures = []

for i in items:
    cands = []
    if i['_source']['booking_item']['flight_item']['type_of_flight'] == 'one-way':
        cands.append(i['_source']['booking_item']['flight_item']['legs'][0])
    elif i['_source']['booking_item']['flight_item']['type_of_flight'] == 'roundtrip':        
        n_legs = len(i['_source']['booking_item']['flight_item']['legs'])
        cands.append(i['_source']['booking_item']['flight_item']['legs'][0])
        cands.append(i['_source']['booking_item']['flight_item']['legs'][n_legs // 2])
    else:
        cands.append(i['_source']['booking_item']['flight_item']['legs'][0])
        
    for l in cands:
        try:
            departures.append(
                {
                    'departure (h)': pd.to_datetime(l['departure_time']).time().hour,
                    'type': i['_source']['booking_item']['flight_item']['type_of_flight']
                })
        except Exception as e:
            print(e)
            print(" ---> {}".format(l['departure_time']))

departures = pd.DataFrame(departures)

output_file("departure_time.html")
p = Histogram(departures, values='departure (h)', title="Hour of departure (local time)")
show(p)

output_file("departure_time_by_type.html")
p = Histogram(departures, values='departure (h)', color='type', title="Hour of departure (local time)")
show(p)

