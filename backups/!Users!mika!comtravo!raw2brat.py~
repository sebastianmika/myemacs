#
# Read locally stored mails, parse them and store on a per message basis
#
from email_parser import parse_mail
from email_tagger import tag_mail
from filter_threads import skip_thread
from ann2brat import ann2brat
import numpy as np
import pickle as pkl
import os
import json


def pickle_loader(pkl_file):
    try:
        while True:
            yield pkl.load(pkl_file)
    except EOFError:
        pass


def load_data(fname):
    msgs = []
    with open(fname, 'rb') as f:
        for msg in pickle_loader(f):
            msgs.append(msg)
    return msgs

fname = 'raw_messages@2016-06-09T09:41:08.pkl'
messages = load_data(fname)

thread_ids = np.unique([m['threadId'] for m in messages])

cnt = 0
for thread_id in thread_ids:
    thread_messages = [m for m in messages if m['threadId'] == thread_id and m is not None]
    thread_messages.sort(key=lambda x: x['internalDate'])
    first_msg = parse_mail(thread_messages[0])
    # Skip all threads that
    if skip_thread(first_msg):
        continue
    ddir = 'first_messages'
    if not os.path.exists(ddir):
        os.makedirs(ddir)
    file_stem = thread_id + '-' + first_msg['message_id']
    with open(os.path.join(ddir, file_stem + '.json'), 'w',
              encoding='utf-8') as fid:
        json.dump(first_msg, fid)
    with open(os.path.join(ddir, file_stem + '.txt'), 'w',
              encoding='utf-8') as fid:
        fid.write(first_msg['body'])
    annotations = tag_mail(first_msg)['tags']
    with open(os.path.join(ddir, file_stem + '.ann.json'), 'w',
              encoding='utf-8') as fid:
        json.dump({'version': 1, 'annotations': annotations}, fid)
    with open(os.path.join(ddir, file_stem + '.ann'), 'w',
              encoding='utf-8') as fid:
        ann2brat(first_msg, {'annotations': annotations}, fid)
    cnt += 1
