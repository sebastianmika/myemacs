import os
from flask import Flask, request, jsonify
import logging
import pandas as pd
from get_items import get_booking_items
from targets.bookings import Bookings


app = Flask(__name__)


logger = logging.getLogger(__name__)


@app.route("/")
def index():
    return "Here is CT-KPI"


@app.route("/query", methods=['POST'])
def query():
    """Generate data based on the following query data
    {'range': {
        'to': '2016-10-31T09:37:40.965Z',
        'from': '2016-10-31T03:37:40.965Z'},
     'maxDataPoints': 906,
     'interval': '20s',
     'rangeRaw': {
         'to': 'now', 'from': 'now-6h'},
     'targets': [{"target": "Some Name", "ref_id": "A"}],
     'panelId': 1,
     'format': 'json'}
    """
    query = request.get_json()
    logger.debug('Original query: {}'.format(query))
    # Get query parameters
    freq = query['interval']
    if freq[-1] == 'm':
        if int(freq[:-1]) < 24 * 60 * 60:
            freq = '1D'
        else:
            freq = freq[:-1] + 'Min'
    elif freq[-1] == 'h':
        if int(freq[:-1]) < 24:
            freq = '1d'
    elif freq[-1] == 'y':
        freq = freq[:-1] + 'A'
    from_fix = pd.to_datetime(query['range']['from']).round('5Min')
    to_fix = pd.to_datetime(query['range']['to']).round('5Min')
    logger.debug('Query parsed: from {} to {} freq {} targets {}'.format(
        from_fix, to_fix, freq, [t['target'] for t in query.get('targets', []) if 'target' in t]))
    # Get booking data (cached)
    data, report, items = get_booking_items(from_fix, to_fix, freq)
    logger.debug('Cache info {}'.format(get_booking_items.cache_info()))
    res = []
    for target in query.get('targets', []):
        if 'target' not in target:
            continue
        if target['target'] in single_targets:
            datapoints = items[items.Type == target['target']].set_index('Booking Date').ID
            min_d, max_d = items['Booking Date'].min(), items['Booking Date'].max()
            datapoints = datapoints.reindex(
                pd.date_range(min_d, max_d, freq=freq), fill_value=0).reset_index()
            datapoints.columns = ['Booking Date', 'Cnt']
        elif target['target'] == 'All Activity 7D Rolling Mean':
            datapoints = items.groupby('Booking Date').ID.sum().rolling('7D').mean().reset_index()
            datapoints.columns = ['Booking Date', 'Cnt']
        res.append({'target': target['target'],
                    'datapoints': [[val, date] for val, date in
                                   zip(datapoints['Cnt'], datapoints['Booking Date'])]})

    return pd.json.dumps(res)

single_targets = ['Booking', 'Cancellation', 'Rebooking', 'Refund',
                  'Correction Cancellation', 'Unknown (Correction)',
                  'Correction Rebooking', 'Correction Refund']
special_targets = ['All Activity 7D Rolling Mean']


targets = []


@app.route("/search", methods=['POST'])
def search():
    """Return list of available metric names"""
    return jsonify([t.search() for t in targets])


if __name__ == "__main__":
    debug = os.environ.get('DEBUG', '0') == '1' or os.environ.get('FLASK_DEBUG')
    if debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(level=log_level,
                        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    bookings_target = Bookings()
    if os.environ.get('FLASK_DEBUG'):
        logger.setLevel(logging.DEBUG)
    app.run()
